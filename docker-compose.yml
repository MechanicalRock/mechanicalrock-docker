version: "2.3"
services:
  aws:
      build:
        context: aws-cli-v2
        dockerfile: Dockerfile
      image: mechanicalrock/docker-aws-cli-v2
      entrypoint: aws
      environment:
        - AWS_DEFAULT_REGION
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_PROFILE
        - AWS_SESSION_TOKEN
        - AWS_SECURITY_TOKEN
      volumes:
        - ${PWD}:/app
        - ~/.aws:/home/dev/.aws
  aws-sso-util:
      build:
        context: aws-sso-util
        dockerfile: Dockerfile
      volumes:
        - ~/.aws:/home/dev/.aws
  sam:
      build:
        context: aws-sam
        dockerfile: Dockerfile
      image: mechanicalrock/docker-aws-sam
      entrypoint: sam
      environment:
        - AWS_DEFAULT_REGION
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_PROFILE
        - AWS_SESSION_TOKEN
        - AWS_SECURITY_TOKEN
        - SAM_CLI_TELEMETRY=0
      volumes:
        - ${PWD}:/app
          #- ~/.aws:/home/dev/.aws
          #- ~/.ssh:/home/dev/.ssh
        - ~/.aws:/root/.aws
        - ~/.ssh:/root/.ssh
  cfn-lint:
      build:
        context: cfn-lint
        dockerfile: Dockerfile
      image: mechanicalrock/docker-cfn-lint
      entrypoint: cfn-lint
      environment:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_PROFILE
        - AWS_SESSION_TOKEN
        - AWS_SECURITY_TOKEN
      volumes:
        - ${PWD}:/app
        - ~/.aws:/root/.aws
        - ~/.ssh:/root/.ssh
  npm:
      build:
        context: npm
        dockerfile: Dockerfile
      working_dir: /app
      image: mechanicalrock/docker-npm
      volumes:
        - ${PWD}:/app
        - ~/.aws/:/home/node/.aws
        - ~/.ssh:/home/node/.ssh
        - ~/.gitconfig:/home/node/.gitconfig
        - ~/.gitconfig.local:/home/node/.gitconfig.local
        - ~/.npmrc:/home/node/.npmrc
      environment:
        - AWS_DEFAULT_REGION
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_PROFILE
        - AWS_SESSION_TOKEN
        - AWS_SECURITY_TOKEN
        - SNYK_TOKEN
      ports:
        - 3000:3000
  npx:
      build:
        context: npm
        dockerfile: Dockerfile
      working_dir: /app
      image: mechanicalrock/docker-npx
      volumes:
        - ${PWD}:/app
        - ~/.aws/:/home/node/.aws
        - ~/.ssh:/home/node/.ssh
        - ~/.npmrc:/home/node/.npmrc
      entrypoint:
        - npx
      entrypoint: npx
      environment:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_PROFILE
        - AWS_SESSION_TOKEN
        - AWS_SECURITY_TOKEN
        - SNYK_TOKEN
  psql:
    image: postgres:9.6.7
    environment:
      - PG_USER
      - PG_PASSWORD
    network_mode: host
    entrypoint:
        - psql 
        - -h 
        - localhost
  psql-osx:
    image: postgres:9.6.7
    environment:
      - PG_USER
      - PG_PASSWORD
    entrypoint:
        - psql 
        - -h 
        - host.docker.internal
  mosh:
    build:
        context: mosh
        dockerfile: Dockerfile
    working_dir: /app
    image: mechanicalrock/docker-mosh
    volumes:
      - ~/.ssh:/root/.ssh
  vscode:
    ipc: host
    image: mechanicalrock/docker-vscode
    build:
      context: vscode
      dockerfile: Dockerfile
    security_opt:
      # copied in run.sh to ensure the file is available in a consistent location on the host machine
      - seccomp=${HOME}/.vscode/seccomp/chrome.json
    environment:
      - DISPLAY=$DISPLAY
      - USER=dev
      - PATH=/home/dev/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - SNYK_TOKEN=$SNYK_TOKEN
        # aws-sam-cli environment variables
      - SAM_CLI_TELEMETRY=0
      - LC_ALL=C.UTF-8
      - LANG=C.UTF-8
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      # - ~/data/projects:/home/dev/data/projects
      # - ~/.vscode:/vscode-data
      - /home/tim/data/projects/personal/dotfiles/vscode/dot_config/Code.symlink:/home/dev/.config/Code
      # Enable the use of Docker from within the container
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.ssh:/home/dev/.ssh
      - ~/.gitconfig:/home/dev/.gitconfig
      - ~/.gitconfig.local:/home/dev/.gitconfig.local
      - ~/.aws:/home/dev/.aws
      - ~/.npmrc:/home/dev/.npmrc

      # persist history
      - ~/.bash_history_vscode:/home/dev/.bash_history
      # Add GPG keyring for GitHub commit signing.
      - ~/.gnupg:/home/dev/.gnupg
    # command: 
    # - /home/dev/workspace
    # Requires docker-compose v2.4
    mem_limit: 3072m
    user: "${CURRENT_UID}"
    ports:
      - "13000:3000"
  vscode-nc:
    build:
      context: vscode-nc
      dockerfile: Dockerfile
    environment:
      - DISPLAY=$DISPLAY
      - USER=dev
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - .:/home/dev/workspace
      - ~/data/projects:/home/dev/data/projects
      #- ~/.vscode:/vscode-data
      - ~/.nuget/:/home/dev/.nuget/
      #- /home/tim/data/projects/personal/dotfiles/vscode/dot_config/Code.symlink:/home/dev/.config/Code
      # Enable the use of Docker from within the container
      - /var/run/docker.sock:/var/run/docker.sock
    command: 
      - /home/dev/workspace
  slack:
    build:
      context: slack
      dockerfile: Dockerfile
    environment:
      - DISPLAY=unix$DISPLAY
      - USER=dev
    # This requires version '2' of compose
    # Was removed in verssion '3'
    # Issue to re-add:
    # see https://github.com/docker/cli/issues/1318
    group_add:
      # Run the container with the following additional groups to enable access to audio/video
      - audio
      - video
    # Required - otherwise crash on login
    ipc: "host"
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - /etc/localtime:/etc/localtime:ro
      - ~/.config/Slack:/home/dev/.config/Slack
      - ~/Downloads:/home/dev/Downloads
    devices:
      - /dev/snd
      - /dev/dri
      - /dev/video0
  cfn-nag:
    build:
        context: cfn-nag
        dockerfile: Dockerfile
    working_dir: /app
    image: mechanicalrock/docker-cfn_nag
    volumes:
      - ${PWD}:/app
  gimp:
    build:
        context: gimp
        dockerfile: Dockerfile
    working_dir: /app
    image: mechnicalrock/docker-gimp
    environment:
      - DISPLAY=unix$DISPLAY
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
  chrome:
    privileged: true
    build:
      context: chrome
      dockerfile: Dockerfile
    image: mechanicalrock/docker-chrome
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - /etc/localtime:/etc/localtime:ro
      - ~/.config/Slack:/home/dev/.config/Slack
      - ~/Downloads:/home/dev/Downloads
    devices:
      - /dev/snd
      - /dev/dri
      - /dev/video0
    environment:
      - DISPLAY=unix$DISPLAY
